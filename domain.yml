version: "3.1"

intents:
  - greet
  - goodbye
  - ask_mcs_architecture
  - ask_about_ddd
  - ask_async_interaction_patterns
  - ask_docker
  - ask_architecture_patterns
  - ask_what_is_architecture_patterns
  - ask_patterns_are_used_when_designing_microservices
  - ask_application_level_patterns
  - ask_application_infrastructure_layer_patterns
  - ask_infrastructure_layer_patterns
  - ask_about_some_tech

slots:
  some_tech:
    type: text
    mappings:
      - type: from_entity
        entity: some_tech
  related_tech:
    type: text
    mappings:
      - type: from_entity
        entity: related_tech

entities:
  - topic
  - pattern_group
  - some_tech
  - related_tech

actions:
  - action_provide_some_tech_info
  - action_provide_async_patterns

responses:
  utter_infrastructure_layer_patterns:
    - text: "
      <p>Паттерны уровня инфраструктуры помогают координировать взаимодействие микросервисов и управлять их сетевыми взаимодействиями</p>
      <p>Представителями это группы паттернов являются:</p>
      <ul>
        <li><b>Service Discovery</b></li>
        <li><b>Service Mesh</b></li>
        <li><b>Service Registry</b></li>
      </ul>
    "

  utter_application_infrastructure_layer_patterns:
    - text: "
      <p>Паттерны уровня инфраструктуры приложений помогают управлять распределёнными системами, обеспечивая их наблюдаемость и безопасность</p>
      <p>Бывают нескольких видов:</p>
      <ul>
        <li><b>distributed tracing</b> - когда фиксируется движение запроса между всеми микро-сервисами</li>
        <li><b>Audit Logging</b> - когда происходит журналирование всех мутаций данных и состояний, в системе</li>
      </ul>
    "

  utter_greet:
    - text: "Привет! Чем могу помочь?"
    - text: "Привет! Рада вас видеть)"
    - text: "Здравствуйте! Чем могу быть полезна?"

  utter_goodbye:
    - text: "Пока!"
    - text: "Если возникнут вопросы - обращайся!)"
    - text: "Была рада помочь! Если понадоблюсь я здесь)"
    - text: "Было приятно познакомиться! До связи!)"
    - text: "Если будут еще вопросы, дайте знать!)"
    - text: "Всего хорошего! Удачи в делах!"

  utter_mcs_architecture:
    - text: "
      Архитектура ПО это огромный пласт знаний.
      Подходы к проектированию архитектур отличаются в зависимости от платформы и целей программного обеспечения. Однако, есть общие принципы:
      <ul>
        <li>SOLID</li>
        <li>Паттерны проектирования</li>
        <li>Характеристики качества</li>
        <li>Сбор требований</li>
      </ul>
    "

  utter_about_ddd:
    - text: "
    DDD - проектирование, ориентированное на домен.
    <h3>Составные части DDD:</h3>
    <ul>
        <li>Домен - По сути это программное отражение одного из основных направлений деятельности компании</li>
        <li>Поддомен - Кусок функционала со своей предметной областью</li>
        <li>Контекст - это область, внутри которой определённые термины и правила имеют чёткое значение. В DDD контексты помогают избежать путаницы, определяя границы использования понятий.</li>
      </ul>
    "

  utter_interaction_patterns:
    - text: "
    Асинхронное взаимодействие между микросервисами — важная составляющая современных распределённых систем.
    Оно позволяет микросервисам «общаться» без необходимости немедленного ответа, что значительно улучшает масштабируемость и надёжность системы.
    <h3>Для проектирования взаимодействия применяются следующие паттерны:</h3>
    <ul>
        <li>Message Queueing (Очередь сообщений)</li>
        <li>Event Sourcing (Хранение событий)</li>
        <li>Publish/Subscribe (Публикация/Подписка)</li>
        <li>Choreography (Хореография)</li>
        <li>Orchestration (Оркестрация)</li>
      </ul>
    "

  utter_about_docker:
    - text: "
    Docker — программное обеспечение для автоматизации развёртывания и управления приложениями в средах с поддержкой контейнеризации, контейнеризатор приложений
    [Подробнее о Docker и пользе его использования для микросервисов здесь](https://practicum.yandex.ru/blog/chto-takoe-docker)
    "

  utter_what_is_architecture_patterns:
    - text: "
          Паттерн проектирования — это часто встречающееся решение определённой проблемы при проектировании архитектуры программ.
          <h3>Из чего состоит паттерн?</h3>
          <p>Описания паттернов обычно очень формальны и чаще всего состоят из таких пунктов:</p>
          <ul>
            <li>проблема, которую решает паттерн;</li>
            <li>мотивации к решению проблемы способом, который предлагает паттерн;</li>
            <li>структуры классов, составляющих решение;</li>
            <li>примера на одном из языков программирования;</li>
            <li>особенностей реализации в различных контекстах;</li>
            <li>связей с другими паттернами</li>
          </ul>
        "
  utter_about_architecture_patterns:
    - text: "
      <p>Выделяют три основные группы паттернов:</p>
      <ul>
        <li>Порождающие паттерны - обеспечивают гибкое создание объектов, без внесения изменений в структуру зависимостей</li>
        <li>Структурные паттерны - помогают настраивать связи между объектами </li>
        <li>Поведенческие паттерны - помогают настраивать коммуникации и обмен данными между объектами</li>
      </ul>
    "
  utter_patterns_are_used_when_designing_microservices:
    - text: "
      <p>Существует несколько групп паттернов, которые используются при проектировании микросервисов:</p>
      <ul>
        <li>Паттерны уровня приложения</li>
        <li>Паттерны уровня инфраструктуры приложений</li>
        <li>Паттерны уровня инфраструктуры</li>
      </ul>
      <p>[Дорожную карту по паттернам можно найти тут](https://microservices.io/patterns/)</p>
    "

  utter_application_level_patterns:
    - text: "
      <p>
        Паттерны уровня приложений фокусируются на управлении данными и организации микросервисов. 
        Они помогают создавать независимые, изолированные и хорошо структурированные микросервисы, 
        обеспечивая гибкость и масштабируемость системы.
      </p>
      <p>Подразделяются на несколько групп:</p>
      <ul>
        <li><b>service per team</b> - когда одна команда отвечает за свой микросервис</li>
        <li><b>database per service</b> - у каждого микросервиса своя база данных</li>
        <li><b>Event Sourcing</b> - когда в базе данных хранятся не итоговые состояния, а их история. И каждое состояние можно вычислить путём интеграции всех исторических слепков</li>
      </ul>
    "
session_config:
  session_expiration_time: 60
  carry_over_slots_to_new_session: true
